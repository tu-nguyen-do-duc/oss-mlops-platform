name: Start a run from Jupyter Notebook on remote server

on:
  push:
    branches:
      - staging
    path:
      - 'notebooks/**'

jobs:
  run-notebook-in-staging-environment:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter
        
    - name: Connect to remote server and run the Notebook
      env:
        REMOTE_CLUSTER_SSH_PRIVATE_KEY: ${{ secrets.REMOTE_CLUSTER_SSH_PRIVATE_KEY }}
        REMOTE_CLUSTER_SSH_IP: ${{ secrets.REMOTE_CLUSTER_SSH_IP }}
        REMOTE_CLUSTER_SSH_USERNAME: ${{ secrets.REMOTE_CLUSTER_SSH_USERNAME }}
      run: |
        # Create the .ssh directory if it doesn't already exist to store SSH keys
        mkdir -p ~/.ssh
        
        # Write the private SSH key to a file and set its permissions to be read/write for the owner only
        echo "$REMOTE_CLUSTER_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Add the remote server's host key to the known_hosts file
        ssh-keyscan -H $REMOTE_CLUSTER_SSH_IP >> ~/.ssh/known_hosts
        
        # Establish an SSH connection to the remote server in the background, forwarding port 8080
        ssh -i ~/.ssh/id_rsa -L 8080:localhost:8080 $REMOTE_CLUSTER_SSH_USERNAME@$REMOTE_CLUSTER_SSH_IP -N &
       
        # Execute the Jupyter Notebook and overwrite the existing file with the results
        jupyter nbconvert --execute --to notebook --inplace notebooks/demo-pipeline.ipynb
