name: Preprocess
description: Preprocess component.
inputs:
- {name: data, type: Dataset}
- {name: target, type: String, default: quality, optional: true}
outputs:
- {name: scaler_out, type: Artifact}
- {name: train_set, type: Dataset}
- {name: test_set, type: Dataset}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'numpy~=1.26.4' 'pandas~=1.4.2' 'scikit-learn~=1.0.2' 'kfp==1.8.22' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def preprocess(
          data: Input[Dataset],
          scaler_out: Output[Artifact],
          train_set: Output[Dataset],
          test_set: Output[Dataset],
          target: str = "quality",
      ):
          """
          Preprocess component.
          """
          import pandas as pd
          import pickle
          from sklearn.model_selection import train_test_split
          from sklearn.preprocessing import StandardScaler

          data = pd.read_csv(data.path)

          # Split the data into training and test sets. (0.75, 0.25) split.
          train, test = train_test_split(data)

          scaler = StandardScaler()

          train[train.drop(target, axis=1).columns] = scaler.fit_transform(train.drop(target, axis=1))
          test[test.drop(target, axis=1).columns] = scaler.transform(test.drop(target, axis=1))

          with open(scaler_out.path, 'wb') as fp:
              pickle.dump(scaler, fp, pickle.HIGHEST_PROTOCOL)

          train.to_csv(train_set.path, index=None)
          test.to_csv(test_set.path, index=None)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - preprocess
