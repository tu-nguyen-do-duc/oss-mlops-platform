# PIPELINE DEFINITION
# Name: preprocess
# Inputs:
#    data: system.Dataset
#    target: str [Default: 'quality']
# Outputs:
#    scaler_out: system.Artifact
#    test_set: system.Dataset
#    train_set: system.Dataset
components:
  comp-preprocess:
    executorLabel: exec-preprocess
    inputDefinitions:
      artifacts:
        data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        target:
          defaultValue: quality
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      artifacts:
        scaler_out:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-preprocess:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'numpy~=1.26.4'\
          \ 'pandas~=1.4.2' 'scikit-learn~=1.0.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess(\n    data: Input[Dataset],\n    scaler_out: Output[Artifact],\n\
          \    train_set: Output[Dataset],\n    test_set: Output[Dataset],\n    target:\
          \ str = \"quality\",\n):\n    \"\"\"\n    Preprocess component.\n    \"\"\
          \"\n    import pandas as pd\n    import pickle\n    from sklearn.model_selection\
          \ import train_test_split\n    from sklearn.preprocessing import StandardScaler\n\
          \n    data = pd.read_csv(data.path)\n\n    # Split the data into training\
          \ and test sets. (0.75, 0.25) split.\n    train, test = train_test_split(data)\n\
          \n    scaler = StandardScaler()\n\n    train[train.drop(target, axis=1).columns]\
          \ = scaler.fit_transform(train.drop(target, axis=1))\n    test[test.drop(target,\
          \ axis=1).columns] = scaler.transform(test.drop(target, axis=1))\n\n   \
          \ with open(scaler_out.path, 'wb') as fp:\n        pickle.dump(scaler, fp,\
          \ pickle.HIGHEST_PROTOCOL)\n\n    train.to_csv(train_set.path, index=None)\n\
          \    test.to_csv(test_set.path, index=None)\n\n"
        image: python:3.10
pipelineInfo:
  name: preprocess
root:
  dag:
    outputs:
      artifacts:
        scaler_out:
          artifactSelectors:
          - outputArtifactKey: scaler_out
            producerSubtask: preprocess
        test_set:
          artifactSelectors:
          - outputArtifactKey: test_set
            producerSubtask: preprocess
        train_set:
          artifactSelectors:
          - outputArtifactKey: train_set
            producerSubtask: preprocess
    tasks:
      preprocess:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess
        inputs:
          artifacts:
            data:
              componentInputArtifact: data
          parameters:
            target:
              componentInputParameter: target
        taskInfo:
          name: preprocess
  inputDefinitions:
    artifacts:
      data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    parameters:
      target:
        defaultValue: quality
        isOptional: true
        parameterType: STRING
  outputDefinitions:
    artifacts:
      scaler_out:
        artifactType:
          schemaTitle: system.Artifact
          schemaVersion: 0.0.1
      test_set:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
      train_set:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.0
